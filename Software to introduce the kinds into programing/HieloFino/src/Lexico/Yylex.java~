/* The following code was generated by JFlex 1.4.1 on 29/10/13 16:44 */

package Lexico;
import java_cup.runtime.Symbol;
import Tokens.sym;
//import JFlex.sym;
import tabla.*;
import hielofino.inicio;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 29/10/13 16:44 from the specification file
 * <tt>C:/Users/Administrador/Desktop/HieloFino/src/Lexico/ejemplo.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  0,  5,  0,  0,  0,  0, 17, 18,  8,  6, 24,  7,  0,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 23, 16, 15, 14,  0, 
     0, 28, 38, 35, 12, 33, 32, 27, 43, 30, 39,  2, 37, 10, 31, 11, 
    25, 41, 26, 29, 34, 42, 36,  2,  2, 13, 40, 21,  0, 22,  0,  3, 
     0, 28, 38, 35, 12, 33, 32, 27, 43, 30, 39,  2, 37, 10, 31, 11, 
    25, 41, 26, 29, 34, 42, 36,  2,  2, 13, 40, 19,  0, 20,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\12\3\1\0\2\3\1\26\1\27\1\30\1\31\4\3"+
    "\1\32\7\3\1\33\7\3\1\34\10\3\1\35\2\3"+
    "\1\36\6\3\1\37\6\3\1\40\1\3\1\41\2\3"+
    "\1\42\4\3\1\43\12\3\1\44\1\3\1\45\6\3"+
    "\1\46\1\3\1\47\6\3\1\50\2\3\1\51\1\3"+
    "\1\52\1\3\1\53\1\3\1\54\2\3\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\54\0\54"+
    "\0\54\0\54\0\334\0\204\0\204\0\u0108\0\u0134\0\u0160"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0"+
    "\0\u02ec\0\u0318\0\260\0\u0344\0\u0370\0\54\0\54\0\54"+
    "\0\54\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\204\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\204\0\u06e0\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\204\0\u0840"+
    "\0\u086c\0\204\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\204\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\204"+
    "\0\u0aa8\0\204\0\u0ad4\0\u0b00\0\204\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\204\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\204\0\u0d94\0\204\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\204\0\u0ec8\0\204"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\204\0\u0ffc"+
    "\0\u1028\0\204\0\u1054\0\204\0\u1080\0\204\0\u10ac\0\204"+
    "\0\u10d8\0\u1104\0\204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\4\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\4\1\33\1\34\1\35\1\4"+
    "\1\36\1\37\2\4\1\40\1\4\1\41\4\4\1\42"+
    "\55\0\1\3\53\0\3\4\6\0\4\4\13\0\23\4"+
    "\5\43\1\5\46\43\1\0\3\4\6\0\1\4\1\44"+
    "\2\4\13\0\5\4\1\45\15\4\17\0\1\46\53\0"+
    "\1\47\52\0\1\50\1\51\35\0\3\4\6\0\4\4"+
    "\13\0\1\4\1\52\1\4\1\53\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\10\4\1\54\12\4\1\0\3\4"+
    "\6\0\4\4\13\0\13\4\1\55\7\4\1\0\3\4"+
    "\6\0\4\4\13\0\5\4\1\56\15\4\1\0\3\4"+
    "\6\0\4\4\13\0\6\4\1\57\14\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\60\1\4\1\61\15\4"+
    "\1\0\3\4\6\0\4\4\13\0\6\4\1\62\14\4"+
    "\1\0\3\4\6\0\4\4\13\0\10\4\1\63\12\4"+
    "\1\0\3\4\6\0\1\4\1\64\2\4\13\0\23\4"+
    "\1\0\3\4\6\0\4\4\13\0\3\4\1\65\17\4"+
    "\1\0\3\4\6\0\2\4\1\66\1\4\13\0\23\4"+
    "\1\0\3\4\6\0\4\4\13\0\1\4\1\67\21\4"+
    "\1\0\3\4\6\0\1\4\1\70\2\4\13\0\23\4"+
    "\1\0\3\4\6\0\4\4\13\0\1\4\1\71\21\4"+
    "\1\0\3\4\6\0\4\4\13\0\1\72\22\4\1\0"+
    "\3\4\6\0\4\4\13\0\3\4\1\73\17\4\1\0"+
    "\3\4\6\0\4\4\13\0\6\4\1\74\14\4\1\0"+
    "\3\4\6\0\4\4\13\0\5\4\1\75\3\4\1\76"+
    "\11\4\1\0\3\4\6\0\4\4\13\0\14\4\1\77"+
    "\6\4\1\0\3\4\6\0\4\4\13\0\6\4\1\100"+
    "\14\4\1\0\3\4\6\0\4\4\13\0\11\4\1\101"+
    "\11\4\1\0\3\4\6\0\4\4\13\0\1\4\1\102"+
    "\21\4\1\0\3\4\6\0\1\4\1\103\2\4\13\0"+
    "\23\4\1\0\3\4\6\0\4\4\13\0\4\4\1\104"+
    "\16\4\1\0\3\4\6\0\4\4\13\0\3\4\1\105"+
    "\17\4\1\0\3\4\6\0\4\4\13\0\2\4\1\106"+
    "\20\4\1\0\3\4\6\0\4\4\13\0\3\4\1\107"+
    "\17\4\1\0\3\4\6\0\4\4\13\0\5\4\1\110"+
    "\15\4\1\0\3\4\6\0\4\4\13\0\6\4\1\111"+
    "\14\4\1\0\3\4\6\0\1\4\1\112\2\4\13\0"+
    "\23\4\1\0\3\4\6\0\4\4\13\0\12\4\1\113"+
    "\10\4\1\0\3\4\6\0\4\4\13\0\4\4\1\114"+
    "\16\4\1\0\3\4\6\0\4\4\13\0\1\115\3\4"+
    "\1\116\16\4\1\0\3\4\6\0\1\4\1\117\2\4"+
    "\13\0\23\4\1\0\3\4\6\0\2\4\1\120\1\4"+
    "\13\0\23\4\1\0\3\4\6\0\4\4\13\0\14\4"+
    "\1\121\6\4\1\0\3\4\6\0\4\4\13\0\11\4"+
    "\1\122\11\4\1\0\3\4\6\0\4\4\13\0\1\4"+
    "\1\123\21\4\1\0\3\4\6\0\4\4\13\0\1\4"+
    "\1\124\21\4\1\0\3\4\6\0\4\4\13\0\11\4"+
    "\1\125\11\4\1\0\3\4\6\0\4\4\13\0\17\4"+
    "\1\126\3\4\1\0\3\4\6\0\4\4\13\0\5\4"+
    "\1\127\15\4\1\0\3\4\6\0\1\4\1\130\2\4"+
    "\13\0\23\4\1\0\3\4\6\0\4\4\13\0\3\4"+
    "\1\131\17\4\1\0\3\4\6\0\4\4\13\0\5\4"+
    "\1\132\15\4\1\0\3\4\6\0\4\4\13\0\6\4"+
    "\1\133\14\4\1\0\3\4\6\0\4\4\13\0\3\4"+
    "\1\134\17\4\1\0\3\4\6\0\4\4\13\0\3\4"+
    "\1\135\17\4\1\0\3\4\6\0\2\4\1\136\1\4"+
    "\13\0\3\4\1\137\1\4\1\140\15\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\141\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\142\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\143\17\4\1\0\3\4"+
    "\6\0\1\4\1\144\2\4\13\0\23\4\1\0\3\4"+
    "\6\0\4\4\13\0\1\4\1\145\21\4\1\0\3\4"+
    "\6\0\4\4\13\0\12\4\1\146\10\4\1\0\3\4"+
    "\6\0\2\4\1\147\1\4\13\0\23\4\1\0\3\4"+
    "\6\0\4\4\13\0\10\4\1\150\12\4\1\0\3\4"+
    "\6\0\4\4\13\0\1\4\1\151\13\4\1\152\5\4"+
    "\1\0\3\4\6\0\4\4\13\0\17\4\1\153\3\4"+
    "\1\0\3\4\6\0\1\154\3\4\13\0\23\4\1\0"+
    "\3\4\6\0\4\4\13\0\1\4\1\155\21\4\1\0"+
    "\3\4\6\0\4\4\13\0\1\156\22\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\157\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\10\4\1\160\12\4\1\0\3\4"+
    "\6\0\4\4\13\0\10\4\1\161\12\4\1\0\3\4"+
    "\6\0\4\4\13\0\1\4\1\162\21\4\1\0\3\4"+
    "\6\0\4\4\13\0\1\4\1\163\21\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\164\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\20\4\1\165\2\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\166\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\167\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\4\4\1\170\16\4\1\0\3\4"+
    "\6\0\4\4\13\0\1\4\1\171\21\4\1\0\3\4"+
    "\6\0\4\4\13\0\10\4\1\172\12\4\1\0\3\4"+
    "\6\0\4\4\13\0\5\4\1\173\15\4\1\0\3\4"+
    "\6\0\4\4\13\0\16\4\1\174\4\4\1\0\3\4"+
    "\6\0\4\4\13\0\21\4\1\175\1\4\1\0\3\4"+
    "\6\0\4\4\13\0\1\4\1\176\21\4\1\0\3\4"+
    "\6\0\1\4\1\177\2\4\13\0\23\4\1\0\3\4"+
    "\6\0\4\4\13\0\12\4\1\200\10\4\1\0\3\4"+
    "\6\0\4\4\13\0\15\4\1\201\5\4\1\0\3\4"+
    "\6\0\1\4\1\202\2\4\13\0\23\4\1\0\3\4"+
    "\6\0\4\4\13\0\5\4\1\203\15\4\1\0\3\4"+
    "\6\0\4\4\13\0\3\4\1\204\17\4\1\0\3\4"+
    "\6\0\4\4\13\0\22\4\1\205\1\0\3\4\6\0"+
    "\4\4\13\0\3\4\1\206\17\4\1\0\3\4\6\0"+
    "\4\4\13\0\10\4\1\207\12\4\1\0\3\4\6\0"+
    "\4\4\13\0\3\4\1\210\17\4\1\0\3\4\6\0"+
    "\4\4\13\0\1\4\1\211\21\4\1\0\3\4\6\0"+
    "\2\4\1\212\1\4\13\0\23\4\1\0\3\4\6\0"+
    "\4\4\13\0\3\4\1\213\17\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\4\11\6\1\10\11"+
    "\12\1\1\0\2\1\4\11\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SimboloAbstracto nombreArchivo;
	
	public int getLinea(){
		return yyline+1;
	}
	
	public int getColumna(){
		return yycolumn+1;
	}

    public void setNombreArchivo(String nombre) {
		nombreArchivo = TablaAbstracta.idTabla.agregarSimbolo(nombre, getLinea(), getColumna());
    }

    public SimboloAbstracto getNombreArchivo() {
		return nombreArchivo;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return new Symbol(sym.ENDIF, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 46: break;
        case 21: 
          { return new Symbol(sym.COMA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 47: break;
        case 5: 
          { return new Symbol(sym.SUMA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 48: break;
        case 22: 
          { return new Symbol(sym.MAYOR_IGUAL, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 49: break;
        case 25: 
          { return new Symbol(sym.MENOR_IGUAL, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 50: break;
        case 36: 
          { return new Symbol(sym.AVANZAR, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 51: break;
        case 23: 
          { return new Symbol(sym.IGUAL_LOGICO, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 52: break;
        case 8: 
          { return new Symbol(sym.DIV, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 53: break;
        case 31: 
          { return new Symbol(sym.BOOL, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 54: break;
        case 35: 
          { return new Symbol(sym.REPITA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 55: break;
        case 29: 
          { return new Symbol(sym.PARA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 56: break;
        case 17: 
          { return new Symbol(sym.LLAVE_CIERRA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 57: break;
        case 28: 
          { return new Symbol(sym.INT, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 58: break;
        case 38: 
          { return new Symbol(sym.PROGRAMA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 59: break;
        case 30: 
          { return new Symbol(sym.SINO, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 60: break;
        case 37: 
          { return new Symbol(sym.FINPARA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 61: break;
        case 6: 
          { return new Symbol(sym.RESTA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 62: break;
        case 11: 
          { return new Symbol(sym.MAYOR, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 63: break;
        case 41: 
          { return new Symbol(sym.MIRAR_ABAJO, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 64: break;
        case 45: 
          { return new Symbol(sym.MIRAR_IZQ, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 65: break;
        case 39: 
          { return new Symbol(sym.THEN, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 66: break;
        case 27: 
          { return new Symbol(sym.MOD, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 67: break;
        case 26: 
          { return new Symbol(sym.SI, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 68: break;
        case 9: 
          { return new Symbol(sym.O, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 69: break;
        case 32: 
          { return new Symbol(sym.FALSE,  TablaAbstracta.boolTabla.agregarSimbolo(yytext(),getLinea(),getColumna()));
          }
        case 70: break;
        case 19: 
          { return new Symbol(sym.COR_CIERRA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 71: break;
        case 34: 
          { return new Symbol(sym.HASTA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 72: break;
        case 43: 
          { return new Symbol(sym.MIRAR_ARRIBA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 73: break;
        case 20: 
          { return new Symbol(sym.PUNTO_COMA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 74: break;
        case 2: 
          { return new Symbol(sym.NUM, TablaAbstracta.intTabla.agregarSimbolo(yytext(),getLinea(),getColumna()));
          }
        case 75: break;
        case 15: 
          { return new Symbol(sym.PARENT_CIERRA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 76: break;
        case 16: 
          { return new Symbol(sym.LLAVE_ABRE, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 77: break;
        case 14: 
          { return new Symbol(sym.PARENT_ABRE, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 78: break;
        case 12: 
          { return new Symbol(sym.IGUAL, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 79: break;
        case 18: 
          { return new Symbol(sym.COR_ABRE, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 80: break;
        case 10: 
          { return new Symbol(sym.Y, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 81: break;
        case 7: 
          { return new Symbol(sym.MULT, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 82: break;
        case 3: 
          { return new Symbol(sym.ID,  TablaAbstracta.idTabla.agregarSimbolo(yytext(),getLinea(),getColumna()));
          }
        case 83: break;
        case 24: 
          { return new Symbol(sym.DIFERENTE, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 84: break;
        case 42: 
          { return new Symbol(sym.INICIOPARA, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 85: break;
        case 13: 
          { return new Symbol(sym.MENOR, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 86: break;
        case 40: 
          { return new Symbol(sym.TRUE, TablaAbstracta.boolTabla.agregarSimbolo(yytext(),getLinea(),getColumna()));
          }
        case 87: break;
        case 1: 
          { String mensaje = "Error Lexíco, caracter ilegal. Línea: " + yyline+1 + " Columna: "+ yycolumn + 
                                             ". \nTexto: \" " + yytext() + "\" \n***********************\n";                      
                            inicio.escribirMsjError(mensaje);
          }
        case 88: break;
        case 44: 
          { return new Symbol(sym.MIRAR_DER, new SimboloTexto(yytext(),getLinea(),getColumna()));
          }
        case 89: break;
        case 4: 
          { 
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
