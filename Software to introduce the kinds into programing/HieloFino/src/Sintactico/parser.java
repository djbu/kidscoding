
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 01 08:53:56 VET 2013
//----------------------------------------------------

package Sintactico;

import Lexico.*;
import hielofino.inicio;
import java.io.*;
import java_cup.runtime.*;
import ast.*;
import tabla.*;
import util.Utilidades;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 01 08:53:56 VET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\006\000\002\011" +
    "\005\000\002\011\010\000\002\006\004\000\002\006\004" +
    "\000\002\013\005\000\002\013\010\000\002\013\003\000" +
    "\002\013\006\000\002\014\005\000\002\014\010\000\002" +
    "\014\003\000\002\014\006\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\006\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\010\015\000\002" +
    "\007\011\000\002\007\015\000\002\012\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\004\004\001\002\000\004\012\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\004\005\011\001\002\000" +
    "\030\014\015\015\020\016\033\017\012\020\024\021\013" +
    "\022\030\024\017\042\025\046\034\053\016\001\002\000" +
    "\004\012\212\001\002\000\004\024\200\001\002\000\004" +
    "\011\177\001\002\000\004\012\175\001\002\000\004\012" +
    "\163\001\002\000\006\007\155\033\154\001\002\000\004" +
    "\012\152\001\002\000\004\011\151\001\002\000\032\006" +
    "\150\014\015\015\020\016\033\017\012\020\024\021\013" +
    "\022\030\024\017\042\025\046\034\053\016\001\002\000" +
    "\004\011\147\001\002\000\004\012\144\001\002\000\004" +
    "\012\132\001\002\000\032\006\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb\042\ufffb" +
    "\046\ufffb\053\ufffb\001\002\000\004\011\131\001\002\000" +
    "\004\024\117\001\002\000\032\006\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\042" +
    "\ufffa\046\ufffa\053\ufffa\001\002\000\032\006\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\024" +
    "\ufffe\042\ufffe\046\ufffe\053\ufffe\001\002\000\004\012\115" +
    "\001\002\000\004\005\035\001\002\000\030\014\015\015" +
    "\020\016\033\017\012\020\024\021\013\022\030\024\017" +
    "\042\025\046\034\053\016\001\002\000\032\006\037\014" +
    "\015\015\020\016\033\017\012\020\024\021\013\022\030" +
    "\024\017\042\025\046\034\053\016\001\002\000\004\047" +
    "\041\001\002\000\032\006\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\024\uffff\042\uffff\046" +
    "\uffff\053\uffff\001\002\000\004\012\042\001\002\000\014" +
    "\012\047\024\052\050\043\051\045\052\051\001\002\000" +
    "\042\010\uffd3\011\uffd3\013\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\054\uffd3\001\002\000\042\010\uffda" +
    "\011\uffda\013\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037\074\040\075" +
    "\041\073\054\uffda\001\002\000\042\010\uffd2\011\uffd2\013" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\054" +
    "\uffd2\001\002\000\030\010\uffe4\011\uffe4\013\uffe4\025\uffe4" +
    "\026\uffe4\027\063\030\064\031\065\032\066\034\062\054" +
    "\061\001\002\000\014\012\047\024\052\050\043\051\045" +
    "\052\051\001\002\000\034\010\uffdd\011\uffdd\013\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd" +
    "\035\071\036\070\054\uffdd\001\002\000\042\010\uffd1\011" +
    "\uffd1\013\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\054\uffd1\001\002\000\044\007\110\010\uffd5\011\uffd5" +
    "\013\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\054\uffd5\001\002\000\042\010\uffd6\011\uffd6\013\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\054\uffd6\001" +
    "\002\000\010\013\057\025\056\026\055\001\002\000\014" +
    "\012\047\024\052\050\043\051\045\052\051\001\002\000" +
    "\014\012\047\024\052\050\043\051\045\052\051\001\002" +
    "\000\004\011\uffcc\001\002\000\030\010\uffe6\011\uffe6\013" +
    "\uffe6\025\uffe6\026\uffe6\027\063\030\064\031\065\032\066" +
    "\034\062\054\061\001\002\000\014\012\047\024\052\050" +
    "\043\051\045\052\051\001\002\000\014\012\047\024\052" +
    "\050\043\051\045\052\051\001\002\000\014\012\047\024" +
    "\052\050\043\051\045\052\051\001\002\000\014\012\047" +
    "\024\052\050\043\051\045\052\051\001\002\000\014\012" +
    "\047\024\052\050\043\051\045\052\051\001\002\000\014" +
    "\012\047\024\052\050\043\051\045\052\051\001\002\000" +
    "\034\010\uffe0\011\uffe0\013\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\071\036\070\054" +
    "\uffe0\001\002\000\014\012\047\024\052\050\043\051\045" +
    "\052\051\001\002\000\014\012\047\024\052\050\043\051" +
    "\045\052\051\001\002\000\042\010\uffdc\011\uffdc\013\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\074\040\075\041\073\054\uffdc" +
    "\001\002\000\014\012\047\024\052\050\043\051\045\052" +
    "\051\001\002\000\014\012\047\024\052\050\043\051\045" +
    "\052\051\001\002\000\014\012\047\024\052\050\043\051" +
    "\045\052\051\001\002\000\042\010\uffd8\011\uffd8\013\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\054\uffd8" +
    "\001\002\000\042\010\uffd9\011\uffd9\013\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\054\uffd9\001\002\000" +
    "\042\010\uffd7\011\uffd7\013\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\054\uffd7\001\002\000\042\010\uffdb" +
    "\011\uffdb\013\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037\074\040\075" +
    "\041\073\054\uffdb\001\002\000\034\010\uffe1\011\uffe1\013" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\034\uffe1\035\071\036\070\054\uffe1\001\002\000\034\010" +
    "\uffe2\011\uffe2\013\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\034\uffe2\035\071\036\070\054\uffe2\001" +
    "\002\000\034\010\uffe3\011\uffe3\013\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\071\036" +
    "\070\054\uffe3\001\002\000\034\010\uffde\011\uffde\013\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034" +
    "\uffde\035\071\036\070\054\uffde\001\002\000\034\010\uffdf" +
    "\011\uffdf\013\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\035\071\036\070\054\uffdf\001\002" +
    "\000\030\010\uffe5\011\uffe5\013\uffe5\025\uffe5\026\uffe5\027" +
    "\063\030\064\031\065\032\066\034\062\054\061\001\002" +
    "\000\014\012\047\024\052\050\043\051\045\052\051\001" +
    "\002\000\010\010\112\025\056\026\055\001\002\000\042" +
    "\010\uffd4\011\uffd4\013\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\054\uffd4\001\002\000\010\013\114\025" +
    "\056\026\055\001\002\000\042\010\uffd0\011\uffd0\013\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\054\uffd0" +
    "\001\002\000\004\013\116\001\002\000\004\011\ufff5\001" +
    "\002\000\010\007\126\011\uffe8\023\uffe8\001\002\000\006" +
    "\011\uffef\023\121\001\002\000\004\024\122\001\002\000" +
    "\010\007\123\011\uffea\023\uffea\001\002\000\014\012\047" +
    "\024\052\050\043\051\045\052\051\001\002\000\010\010" +
    "\125\025\056\026\055\001\002\000\006\011\uffe9\023\uffe9" +
    "\001\002\000\014\012\047\024\052\050\043\051\045\052" +
    "\051\001\002\000\010\010\130\025\056\026\055\001\002" +
    "\000\006\011\uffe7\023\uffe7\001\002\000\032\006\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\024\ufffd\042\ufffd\046\ufffd\053\ufffd\001\002\000\014\012" +
    "\047\024\052\050\043\051\045\052\051\001\002\000\010" +
    "\013\134\025\056\026\055\001\002\000\004\005\135\001" +
    "\002\000\030\014\015\015\020\016\033\017\012\020\024" +
    "\021\013\022\030\024\017\042\025\046\034\053\016\001" +
    "\002\000\032\006\137\014\015\015\020\016\033\017\012" +
    "\020\024\021\013\022\030\024\017\042\025\046\034\053" +
    "\016\001\002\000\034\006\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\042\uffce\045" +
    "\140\046\uffce\053\uffce\001\002\000\004\005\141\001\002" +
    "\000\030\014\015\015\020\016\033\017\012\020\024\021" +
    "\013\022\030\024\017\042\025\046\034\053\016\001\002" +
    "\000\032\006\143\014\015\015\020\016\033\017\012\020" +
    "\024\021\013\022\030\024\017\042\025\046\034\053\016" +
    "\001\002\000\032\006\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\042\uffcd\046\uffcd" +
    "\053\uffcd\001\002\000\014\012\047\024\052\050\043\051" +
    "\045\052\051\001\002\000\010\013\146\025\056\026\055" +
    "\001\002\000\004\011\ufff3\001\002\000\032\006\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\024\ufff8\042\ufff8\046\ufff8\053\ufff8\001\002\000\004\002" +
    "\001\001\002\000\032\006\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\042\ufff9\046" +
    "\ufff9\053\ufff9\001\002\000\004\013\153\001\002\000\004" +
    "\011\ufff6\001\002\000\014\012\047\024\052\050\043\051" +
    "\045\052\051\001\002\000\014\012\047\024\052\050\043" +
    "\051\045\052\051\001\002\000\010\010\157\025\056\026" +
    "\055\001\002\000\004\033\160\001\002\000\014\012\047" +
    "\024\052\050\043\051\045\052\051\001\002\000\010\011" +
    "\ufff1\025\056\026\055\001\002\000\010\011\ufff2\025\056" +
    "\026\055\001\002\000\004\024\017\001\002\000\004\011" +
    "\165\001\002\000\004\024\017\001\002\000\004\011\167" +
    "\001\002\000\014\012\047\024\052\050\043\051\045\052" +
    "\051\001\002\000\010\013\171\025\056\026\055\001\002" +
    "\000\004\005\172\001\002\000\030\014\015\015\020\016" +
    "\033\017\012\020\024\021\013\022\030\024\017\042\025" +
    "\046\034\053\016\001\002\000\032\006\174\014\015\015" +
    "\020\016\033\017\012\020\024\021\013\022\030\024\017" +
    "\042\025\046\034\053\016\001\002\000\032\006\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\024\uffcf\042\uffcf\046\uffcf\053\uffcf\001\002\000\004\013" +
    "\176\001\002\000\004\011\ufff7\001\002\000\032\006\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\024\ufffc\042\ufffc\046\ufffc\053\ufffc\001\002\000\010" +
    "\007\207\011\uffec\023\uffec\001\002\000\006\011\ufff0\023" +
    "\202\001\002\000\004\024\203\001\002\000\010\007\204" +
    "\011\uffee\023\uffee\001\002\000\014\012\047\024\052\050" +
    "\043\051\045\052\051\001\002\000\010\010\206\025\056" +
    "\026\055\001\002\000\006\011\uffed\023\uffed\001\002\000" +
    "\014\012\047\024\052\050\043\051\045\052\051\001\002" +
    "\000\010\010\211\025\056\026\055\001\002\000\006\011" +
    "\uffeb\023\uffeb\001\002\000\004\013\213\001\002\000\004" +
    "\011\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\021\004\031\005\026\006\013\007" +
    "\025\010\030\011\022\012\020\001\001\000\002\001\001" +
    "\000\004\013\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\037\005\026\006\013\007" +
    "\025\010\030\011\022\012\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\035\004\031\005\026\006\013\007\025\010\030" +
    "\011\022\012\020\001\001\000\020\004\037\005\026\006" +
    "\013\007\025\010\030\011\022\012\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\053\016\045\017\047\020\043\021\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\112\016\045\017\047\020\043\021\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\106" +
    "\017\047\020\043\021\052\001\001\000\012\016\057\017" +
    "\047\020\043\021\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\105\020\043\021\052\001\001\000" +
    "\010\017\104\020\043\021\052\001\001\000\010\017\103" +
    "\020\043\021\052\001\001\000\010\017\102\020\043\021" +
    "\052\001\001\000\010\017\101\020\043\021\052\001\001" +
    "\000\010\017\066\020\043\021\052\001\001\000\002\001" +
    "\001\000\006\020\100\021\052\001\001\000\006\020\071" +
    "\021\052\001\001\000\002\001\001\000\004\021\077\001" +
    "\001\000\004\021\076\001\001\000\004\021\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\110\016\045\017\047\020\043\021\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\123\016\045\017\047\020\043" +
    "\021\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\126\016\045\017\047\020\043\021\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\132\016\045\017\047\020\043\021\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\135\004" +
    "\031\005\026\006\013\007\025\010\030\011\022\012\020" +
    "\001\001\000\020\004\037\005\026\006\013\007\025\010" +
    "\030\011\022\012\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\141\004\031\005\026\006\013\007" +
    "\025\010\030\011\022\012\020\001\001\000\020\004\037" +
    "\005\026\006\013\007\025\010\030\011\022\012\020\001" +
    "\001\000\002\001\001\000\014\015\144\016\045\017\047" +
    "\020\043\021\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\161\016" +
    "\045\017\047\020\043\021\052\001\001\000\014\015\155" +
    "\016\045\017\047\020\043\021\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\160\016\045\017\047" +
    "\020\043\021\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\163\001\001\000\002\001\001\000\004" +
    "\011\165\001\001\000\002\001\001\000\014\015\167\016" +
    "\045\017\047\020\043\021\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\172\004\031\005\026\006" +
    "\013\007\025\010\030\011\022\012\020\001\001\000\020" +
    "\004\037\005\026\006\013\007\025\010\030\011\022\012" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\204" +
    "\016\045\017\047\020\043\021\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\207\016\045\017\047" +
    "\020\043\021\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new parser(new Yylex(System.in)).parse();
	}
/*	public void syntax_error(Symbol s){
		    String msj = "Error de sintaxis. Linea: " + (s.right + 1) +  " Columna: " + s.left + ". Texto: \"" + s.value + "\"";
            
		report_error(msj, null);
                inicio.escribirMsjError(msj);
	}*/

public void syntax_error(Symbol cur_token) {
   int lineno = action_obj.getLinea();
        int column = action_obj.getColumna();
	
        
        String msj = lineno 
		         + ":" + column + ": error de sintáxis cerca de ";
        System.err.print(msj);
        
        inicio.escribirMsjError(msj+Utilidades.imprimirToken(cur_token));
        
	omerrs++;
	if (omerrs>50) {
	   System.err.println("El análisis se ha detenido porque se encontraron muchos errores");
	   System.exit(1);
	}
    }

////////////////////////////////////
int omerrs = 0;

    public int getOmerrs(){
        return omerrs;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	int getLinea() {
	return ((Yylex)parser.getScanner()).getLinea();
            }

    int getColumna(){
        return ((Yylex)parser.getScanner()).getColumna();
    }

    SimboloAbstracto getNombreArchivo()
    {

     return ((Yylex)parser.getScanner()).getNombreArchivo();
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sent_repita ::= REPITA LLAVE_ABRE sec_sent LLAVE_CIERRA HASTA PARENT_ABRE expr PARENT_CIERRA 
            {
              Sentencia RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		SimboloAbstracto r = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaSentencia s = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new RepitaHasta(c, s, r.getLinea(), r.getColumna());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_repita",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sent_if ::= SI PARENT_ABRE expr PARENT_CIERRA LLAVE_ABRE sec_sent LLAVE_CIERRA SINO LLAVE_ABRE sec_sent LLAVE_CIERRA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		SimboloAbstracto s = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaSentencia en = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaSentencia sn = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        	RESULT = new Condicional(c, en, sn, s.getLinea(), s.getColumna());
    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sent_if ::= SI PARENT_ABRE expr PARENT_CIERRA LLAVE_ABRE sec_sent LLAVE_CIERRA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SimboloAbstracto s = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaSentencia en = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
       		RESULT = new Condicional(c, en, null, s.getLinea(), s.getColumna());
    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sent_for ::= PARA PARENT_ABRE sent_asig PUNTO_COMA sent_asig PUNTO_COMA expr PARENT_CIERRA LLAVE_ABRE sec_sent LLAVE_CIERRA 
            {
              Sentencia RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		SimboloAbstracto r = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Sentencia s1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sentencia s2 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion s3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int seccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaSentencia secc = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Para(s1, s2, s3, secc, r.getLinea(), r.getColumna());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= PARENT_ABRE expr PARENT_CIERRA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto val = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new NumeroBool(val, val.getLinea(), val.getColumna());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto val = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new NumeroBool(val, val.getLinea(), val.getColumna());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= NUM 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto val = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new NumeroEntero(val, val.getLinea(), val.getColumna());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ID COR_ABRE expr COR_CIERRA 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Variable(id, id.getLinea(), id.getColumna());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= factor 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	RESULT = e;
    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term MOD factor 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term DIV factor 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term MULT factor 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_aritmeticas ::= term 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        				RESULT = e;
    				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_aritmeticas ::= expr_aritmeticas RESTA term 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_aritmeticas ::= expr_aritmeticas SUMA term 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_relacionales ::= expr_aritmeticas 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				        RESULT = e;
				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_relacionales ::= expr_relacionales DIFERENTE expr_aritmeticas 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diferente(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_relacionales ::= expr_relacionales IGUAL_LOGICO expr_aritmeticas 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Igual(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_relacionales ::= expr_relacionales MAYOR_IGUAL expr_aritmeticas 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MayorIgual(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_relacionales ::= expr_relacionales MAYOR expr_aritmeticas 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mayor(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_relacionales ::= expr_relacionales MENOR_IGUAL expr_aritmeticas 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorIgual(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_relacionales ::= expr_relacionales MENOR expr_aritmeticas 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menor(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr_relacionales 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr O expr_relacionales 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new O(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr Y expr_relacionales 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Y(e1, e2, m.getLinea(), m.getColumna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl_bool ::= ID COR_ABRE expr COR_CIERRA 
            {
              Sentencia RESULT =null;
		
			//PENDIENTE!!!!
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_bool",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl_bool ::= ID 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		////////////////////////////
        SimboloAbstracto a = new SimboloAbstracto("falso", id.getLinea(),id.getColumna()) {
            
            @Override
            public Object clone() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };      
        /////////////////////////////

			RESULT = new Declaracion(new Variable(id, id.getLinea(), id.getColumna()), new NumeroBool(a,id.getLinea(),id.getColumna()), id.getLinea(), id.getColumna());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_bool",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl_bool ::= decl_bool COMA ID COR_ABRE expr COR_CIERRA 
            {
              Sentencia RESULT =null;
		
			//PENDIENTE!!!!
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_bool",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_bool ::= decl_bool COMA ID 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		////////////////////////////
        SimboloAbstracto a = new SimboloAbstracto("falso", id.getLinea(),id.getColumna()) {
            
            @Override
            public Object clone() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };      
        /////////////////////////////

			RESULT = new Declaracion(new Variable(id, id.getLinea(), id.getColumna()), new NumeroBool(a,id.getLinea(),id.getColumna()), id.getLinea(), id.getColumna());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_bool",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl_ent ::= ID COR_ABRE expr COR_CIERRA 
            {
              Sentencia RESULT =null;
		
			//PENDIENTE!!!!
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_ent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl_ent ::= ID 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		///////////////////////////
           SimboloAbstracto a = new SimboloAbstracto("0", id.getLinea() , id.getColumna()) {
               
               @Override
               public Object clone() {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }
           };            
          ///////////////////////////
			RESULT = new Declaracion(new Variable(id, id.getLinea(), id.getColumna()), new NumeroEntero(a,id.getLinea(),id.getColumna()), id.getLinea(), id.getColumna());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_ent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_ent ::= decl_ent COMA ID COR_ABRE expr COR_CIERRA 
            {
              Sentencia RESULT =null;
		
			//PENDIENTE!!!
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_ent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_ent ::= decl_ent COMA ID 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		///////////////////////////
           SimboloAbstracto a = new SimboloAbstracto("0", id.getLinea() , id.getColumna()) {
               
               @Override
               public Object clone() {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }
           };            
          ///////////////////////////
			RESULT = new Declaracion(new Variable(id, id.getLinea(), id.getColumna()), new NumeroEntero(a,id.getLinea(),id.getColumna()), id.getLinea(), id.getColumna());
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_ent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent_decl ::= BOOL decl_bool 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent_decl ::= INT decl_ent 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent_asig ::= ID COR_ABRE expr COR_CIERRA IGUAL expr 
            {
              Sentencia RESULT =null;
		
					//PENDIENTE!!!!
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent_asig ::= ID IGUAL expr 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloAbstracto a = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new Asignacion(new Variable(id, id.getLinea(), id.getColumna()), e, a.getLinea(), a.getColumna());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion_call ::= AVANZAR PARENT_ABRE expr PARENT_CIERRA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloAbstracto a = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Avanzar( e  ,a.getLinea(), a.getColumna() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcion_call ::= MIRAR_DER PARENT_ABRE PARENT_CIERRA 
            {
              Sentencia RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =  new MirarDerecha( m.getLinea(), m.getColumna() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion_call ::= MIRAR_IZQ PARENT_ABRE PARENT_CIERRA 
            {
              Sentencia RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =  new MirarIzquierda( m.getLinea(), m.getColumna() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion_call ::= MIRAR_ABAJO PARENT_ABRE PARENT_CIERRA 
            {
              Sentencia RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =  new MirarAbajo( m.getLinea(), m.getColumna() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_call ::= MIRAR_ARRIBA PARENT_ABRE PARENT_CIERRA 
            {
              Sentencia RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloAbstracto m = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =  new MirarArriba( m.getLinea(), m.getColumna() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= sent_asig PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= sent_repita PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_for 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= sent_if 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_decl PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= funcion_call PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sec_sent ::= sent 
            {
              ListaSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new ListaSentencia( getLinea(), getColumna());
        		RESULT.agregarElemento(s);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sec_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sec_sent ::= sec_sent sent 
            {
              ListaSentencia RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaSentencia sc = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				sc.agregarElemento(s);
        		RESULT = sc;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sec_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= PROGRAMA PARENT_ABRE PARENT_CIERRA LLAVE_ABRE sec_sent LLAVE_CIERRA 
            {
              Programa RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaSentencia sc = (ListaSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Programa(sc, 1, 0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

